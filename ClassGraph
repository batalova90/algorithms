#include <iostream>
#include <list>
#include <vector>
#include <string>




class Graph
{
    private:
        class verge
        {
            public:
                std::list<int> neighborVerges;
                std::string color {"white"};
                
    
        };
       
        int capacity {5};
        std::vector<verge> arrayVerges;
    public:
        Graph(int capacity_) : capacity{capacity_}
        {
            arrayVerges.resize(capacity);
        }
        
        ~Graph()
        {
            
            for(int i = 0; i < arrayVerges.size(); i++)
            {
                if(!arrayVerges[i].neighborVerges.empty())
                {
                    arrayVerges[i].neighborVerges.clear();
                }
            }
            
            arrayVerges.clear();
        }
        
        void InsertNeighborVerges(int verge, std::vector<int> &neighbor)
        {
            for(auto &element : neighbor)
                arrayVerges[verge - 1].neighborVerges.push_back(element);
        }
        
        void PrintNeighborVerges(int verge_)
        {
            std::cout << "Соседи вершины " << verge_ << ":" << std:: endl;
            for(int i : arrayVerges[verge_ - 1].neighborVerges)
                std::cout << i << " ";
            std::cout << std::endl;
        }
        
        friend std::ostream& operator << (std::ostream &out, const Graph graph);
    
};

std::ostream& operator << (std::ostream &out, const Graph graph)
{
    for(int i = 0; i < graph.arrayVerges.size(); i++)
        {
            std:: cout << "Вершина графа " << i + 1 << std::endl;
            std::cout << "Cоседи: ";
            for(auto j:graph.arrayVerges[i].neighborVerges)
                std::cout << j << " ";
            std::cout << std::endl;
        }
        
    return out;
    
}



int main()
{
   Graph myGraph(4);
    std::vector<int> array1{2, 4};
    std::vector<int> array2{3, 4};
    std::vector<int> array3{0};
    std::vector<int> array4{3, 1};
    myGraph.InsertNeighborVerges(1, array1);
    myGraph.InsertNeighborVerges(2, array2);
    myGraph.InsertNeighborVerges(3, array3);
    myGraph.InsertNeighborVerges(4, array4);
    
    std::cout << myGraph << std::endl;
    
    return 0;
}
